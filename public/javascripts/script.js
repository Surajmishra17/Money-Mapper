// Global state variables
let selectedPropertyType = null;
let selectedPropertyOption = null;
let currentStep = 1;

// Open modal for property type
function addProperty(type) {
    selectedPropertyType = type;
    currentStep = 1;

    const optionsContainer = document.getElementById('propertyOptions');
    let options = [];

    if (type === 'house') {
        options = ['1 Room', '2 Rooms', '3 Rooms', '4 Rooms', '5+ Rooms'];
    } else if (type === 'flat') {
        options = ['1BHK', '2BHK', '3BHK', '4BHK', '5BHK'];
    }

    optionsContainer.innerHTML = '';
    options.forEach(option => {
        const btn = document.createElement('button');
        btn.className = 'property-option';
        btn.textContent = option;
        btn.onclick = () => selectPropertyOption(btn, option);
        optionsContainer.appendChild(btn);
    });

    // Reset forms
    ['tenantName', 'monthlyRent', 'electricityRate', 'electricityUnits', 'waterUsage'].forEach(id => {
        document.getElementById(id).value = '';
    });

    document.getElementById('propertyModal').style.display = 'block';
    showStep(1);
    document.getElementById('nextBtn1').disabled = true;
}

// Select property option
function selectPropertyOption(btn, option) {
    document.querySelectorAll('.property-option').forEach(b => b.classList.remove('selected'));
    btn.classList.add('selected');
    selectedPropertyOption = option;
    document.getElementById('nextBtn1').disabled = false;
}

// Step navigation
function nextStep() {
    if (currentStep === 1) {
        if (!selectedPropertyOption) {
            alert('Please select a property option');
            return;
        }
        currentStep = 2;
    } else if (currentStep === 2) {
        const tenantName = document.getElementById('tenantName').value;
        const monthlyRent = document.getElementById('monthlyRent').value;
        if (!tenantName || !monthlyRent) {
            alert('Please fill all tenant details');
            return;
        }
        currentStep = 3;
    }
    showStep(currentStep);
}

function prevStep() {
    if (currentStep > 1) {
        currentStep--;
        showStep(currentStep);
    }
}

// Show modal step
function showStep(step) {
    for (let i = 1; i <= 4; i++) {
        const stepElement = document.getElementById(`step${i}`);
        if (stepElement) stepElement.classList.add('hidden');
    }
    document.getElementById(`step${step}`).classList.remove('hidden');
}

// Generate receipt
function generateReceipt() {
    const tenantName = document.getElementById('tenantName').value;
    const monthlyRent = parseFloat(document.getElementById('monthlyRent').value);
    const electricityRate = parseFloat(document.getElementById('electricityRate').value);
    const electricityUnits = parseFloat(document.getElementById('electricityUnits').value);
    const waterUsage = parseFloat(document.getElementById('waterUsage').value);

    if (!tenantName || !monthlyRent || !electricityRate || !electricityUnits || !waterUsage) {
        alert('Please fill all details');
        return;
    }

    const electricityBill = electricityRate * electricityUnits;
    const totalAmount = monthlyRent + electricityBill + waterUsage;

    const receiptData = {
        tenantName,
        propertyType: `${selectedPropertyType.charAt(0).toUpperCase() + selectedPropertyType.slice(1)} - ${selectedPropertyOption}`,
        monthlyRent,
        electricityRate,
        electricityUnits,
        waterUsage,
        totalAmount,
        date: new Date()
    };

    // Render receipt HTML
    document.getElementById('receiptContent').innerHTML = `
        <h2>RENT RECEIPT</h2>
        <div style="text-align:center;margin-bottom:20px;">
            <strong>Money Mapper</strong><br>Date: ${new Date(receiptData.date).toLocaleDateString()}
        </div>
        <div class="receipt-item"><span><strong>Tenant Name:</strong></span><span>${tenantName}</span></div>
        <div class="receipt-item"><span><strong>Property Type:</strong></span><span>${receiptData.propertyType}</span></div>
        <div class="receipt-item"><span><strong>Monthly Rent:</strong></span><span>₹${monthlyRent.toFixed(2)}</span></div>
        <div class="receipt-item"><span><strong>Electricity (${electricityUnits} units @ ₹${electricityRate}/unit):</strong></span><span>₹${electricityBill.toFixed(2)}</span></div>
        <div class="receipt-item"><span><strong>Water Usage:</strong></span><span>₹${waterUsage.toFixed(2)}</span></div>
        <div class="receipt-item receipt-total"><span><strong>TOTAL AMOUNT:</strong></span><span><strong>₹${totalAmount.toFixed(2)}</strong></span></div>
        <div style="text-align:center;margin-top:30px;font-size:12px;color:#666;">Generated by Money Mapper<br>Thank you for using our service!</div>
    `;

    currentStep = 4;
    showStep(4);

    // Save receipt to backend
    fetch('/receipt/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(receiptData)
    })
        .then(res => res.json())
        .then(data => {
            console.log("Receipt saved:", data);
            addPropertyCard(data);
        })
        .catch(err => console.error("Error saving receipt:", err));
}

// Add property card to DOM
function addPropertyCard(r) {
    const container = document.querySelector('.Myproperties-section');
    const card = document.createElement('div');
    card.classList.add('property-card');
    card.innerHTML = `
        <h3>${r.tenantName}</h3>
        <p><strong>Property:</strong> ${r.propertyType}</p>
        <p><strong>Monthly Rent:</strong> ₹${r.monthlyRent}</p>
        <p><strong>Total Amount:</strong> ₹${r.totalAmount}</p>
        <p><strong>Date:</strong> ${new Date(r.date).toLocaleDateString()}</p>
        <button onclick="window.open('/receipt/download/${r._id}')">Download PDF</button>
    `;
    container.appendChild(card);
}

// Load saved properties from backend
async function loadMyProperties() {
    try {
        const res = await fetch('/receipt/all');
        if (res.status === 401) { // Handle unauthorized case
            const container = document.querySelector('.Myproperties-section');
            container.innerHTML = "<h3>Please log in to view your properties.</h3>";
            return;
        }
        if (!res.ok) {
            console.log("User not logged in or no receipts");
            document.querySelector('.Myproperties-section').innerHTML = "<h3>No receipts found.</h3>";
            return;
        }
        const receipts = await res.json();
        const container = document.querySelector('.Myproperties-section');
        container.innerHTML = ''; // Clear old cards
        if (receipts.length === 0) {
            container.innerHTML = "<h3>No receipts found.</h3>";
            return;
        }
        receipts.forEach(r => {
            const card = document.createElement('div');
            card.classList.add('property-card');
            card.innerHTML = `
                <h4>${r.tenantName}</h4>
                <p><strong>Property:</strong> ${r.propertyType || 'N/A'}</p>
                <p><strong>Monthly Rent:</strong> ₹${r.monthlyRent || 0}</p>
                <p><strong>Total Amount:</strong> ₹${r.totalAmount || 0}</p>
                <p><strong>Date:</strong> ${new Date(r.date).toLocaleDateString()}</p>
                <button onclick="window.location.href='/receipt/download/${r._id}'">Download</button>
            `;
            container.appendChild(card);
        });
    } catch (err) {
        console.error("Error loading properties:", err);
    }
}

// Call this function when the page loads
document.addEventListener('DOMContentLoaded', loadMyProperties);



// Download receipt as PDF
function downloadReceipt() {
    const receiptContent = document.getElementById('receiptContent').innerHTML;
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>Rent Receipt</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .receipt-item { display: flex; justify-content: space-between; margin-bottom: 10px; padding: 8px 0; border-bottom: 1px solid #eee; }
                    .receipt-total { font-weight: bold; font-size: 18px; border-top: 2px solid #30d12d; padding-top: 15px; margin-top: 15px; }
                    h2 { color: #30d12d; text-align: center; }
                </style>
            </head>
            <body>${receiptContent}</body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}

// Close modal
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
    resetPropertyModal();
}

// Reset modal state
function resetPropertyModal() {
    selectedPropertyType = null;
    selectedPropertyOption = null;
    currentStep = 1;
    document.getElementById('nextBtn1').disabled = true;
    document.querySelectorAll('.property-option').forEach(btn => btn.classList.remove('selected'));
    ['tenantName', 'monthlyRent', 'electricityRate', 'electricityUnits', 'waterUsage'].forEach(id => {
        document.getElementById(id).value = '';
    });
}

document.addEventListener('DOMContentLoaded', function () {
    const logoutBtn = document.getElementById('logout');

    if (logoutBtn) {
        logoutBtn.addEventListener('click', () => {
            // Clear receipts from UI
            const container = document.querySelector('.Myproperties-section');
            if (container) {
                container.innerHTML = '';
            }

            // Optionally clear any stored state in JS
            localStorage.removeItem('myReceipts');
        });
    }
});


// Event listeners
document.addEventListener('DOMContentLoaded', function () {
    console.log('Money Mapper App initialized');
    document.querySelector('.btn.add-house')?.addEventListener('click', () => addProperty('house'));
    document.querySelector('.btn.add-flat')?.addEventListener('click', () => addProperty('flat'));
    document.getElementById('nextBtn1')?.addEventListener('click', nextStep);
    document.getElementById('nextBtn2')?.addEventListener('click', nextStep);
    document.getElementById('prevBtn2')?.addEventListener('click', prevStep);
    document.getElementById('prevBtn3')?.addEventListener('click', prevStep);
    document.getElementById('generateReceiptBtn')?.addEventListener('click', generateReceipt);
    document.getElementById('downloadReceiptBtn')?.addEventListener('click', downloadReceipt);
    document.querySelector('#propertyModal .close')?.addEventListener('click', () => closeModal('propertyModal'));

    // Close modal when clicking outside
    window.onclick = function (event) {
        const modal = document.getElementById('propertyModal');
        if (modal && event.target === modal) {
            closeModal('propertyModal');
        }
    };

    // Load saved properties
    loadMyProperties();
});
